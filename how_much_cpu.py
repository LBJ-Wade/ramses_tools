#!/usr/bin/env python

"""how_much_cpu.py for Ramses
by Andrew Pontzen

This script looks at PBS outputs in the current working directory, assuming they are generated by
Ramses runs, and estimates the total amount of CPU hours spent on the current run.

If matplotlib is installed, it also saves a PDF with a plot of the amount of CPU hours used versus
the scalefactor of the simulation.
"""

from __future__ import print_function

import glob, re


outputs = glob.glob("*.o*")

times = []
nprocs = []
scalefactors = []
time = None
cumutime = 0.0

if len(outputs)==0:
    print("No outputs found. Change directory to your run folder and rerun how_much_cpu.py")
    exit(1)
for o in sorted(outputs):
    time = None
    for l in open(o,'r'):
        if "Total running" in l:
            time = float(re.search("[0-9.]+",l).group(0))
            times.append(time+cumutime)
            scalefactors.append(scalefactor)
        if "Fine step" in l:
            try:
                scalefactor = float(re.search(r"a= ([0-9.E\-]+)",l).group(1))
            except ValueError:
                pass
        elif "nproc" in l:
            nproc = int(re.search("nproc\s+=\s+([0-9]+)", l).group(1))
    if time is not None:
        cumutime+=time

time = times[-1]
hour = int(time/60/60)
mins = int(time/60)-hour*60

print("Total wall-time %.0fh %.0fm"%(hour,mins))
print("Number of processors %d"%nproc)
print("Total CPU time %.0fh"%((time/60/60)*nproc))

try:
    import matplotlib, numpy as np
    matplotlib.use('pdf')
    import pylab as p
 
    p.plot(nproc*np.array(times)/60/60,scalefactors)
    p.xlabel("CPU hours")
    p.ylabel("Scalefactor")
    p.savefig("how_much_cpu.pdf")
       
    print("Wrote a report as how_much_cpu.pdf")

except ImportError:
    print("Was not able to import matplotlib - no .pdf output produced")
